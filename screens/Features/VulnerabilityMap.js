import React, {useState, useEffect, useRef, useContext} from 'react';
import {
  View,
  Image,
  TouchableOpacity,
  TextInput,
  Text,
  StyleSheet,
  KeyboardAvoidingView,
  Alert,
  FlatList,
  TouchableHighlight,
} from 'react-native';
import {
  createNativeStackNavigator,
  Header,
} from '@react-navigation/native-stack';
import {NavigationContainer} from '@react-navigation/native';
import {useNavigation} from '@react-navigation/native';
import {CommonActions} from '@react-navigation/native';
import {UserContext} from '../../provider/UserProvider';
import Icon from 'react-native-vector-icons/FontAwesome';
import {SafeAreaView} from 'react-native-safe-area-context';
import {format, formatDistance, formatRelative, subDays} from 'date-fns';
import {Dimensions} from 'react-native';
import MapView, {
  PROVIDER_GOOGLE,
  AnimatedRegion,
  Animated,
  Marker,
  Circle,
  TYPE_MAPS,
  Callout,
  InfoWindow,
} from 'react-native-maps';
import axios from 'axios';

function VulnerabilityMap() {
  const [isLoading, setLoading] = useState(true);
  const context = useContext(UserContext);
  const barangayLoc = context.brgy;
  //const context = useContext(UserContext);
  const brgy = context.brgy;
  const mapView = useRef(null);
  const [degree, setDegree] = useState();
  const [landmark, setLandmark] = useState();
  const [type, setType] = useState();
  const [region, setRegion] = useState({
    latitude: 14.6137,
    longitude: 121.096,
    latitudeDelta: 0.008,
    longitudeDelta: 0.008,
  });

  const [location, setLocation] = useState([]);

  const animateMap = () => {
    mapView.current.animateToRegion(
      {
        // Takes a region object as parameter
        longitude: 121.085039,
        latitude: 14.615522,
        latitudeDelta: 0.006,
        longitudeDelta: 0.006,
      },
      1000,
    );
  };

  const animateMapOut = () => {
    mapView.current.animateToRegion(
      {
        // Takes a region object as parameter
        longitude: 121.085039,
        latitude: 14.615522,
        latitudeDelta: 0.015,
        longitudeDelta: 0.015,
      },
      1000,
    );
  };

  const showDetails = (degree, landmark, type) => {
    setDegree(degree);
    setLandmark(landmark);
    setType(type);
  };

  const animateMapUndo = () => {
    mapView.current.animateToRegion(
      {
        // Takes a region object as parameter
        longitude: 121.085039,
        latitude: 14.615522,
        latitudeDelta: 0.006,
        longitudeDelta: 0.006,
      },
      1000,
    );
  };

  useEffect(() => {
    if (barangayLoc == 'Barangay Santolan') {
      setRegion({
        longitude: 121.088,
        latitude: 14.6131,
        latitudeDelta: 0.008,
        longitudeDelta: 0.008,
      });
    } else if (barangayLoc == 'Barangay Manggahan') {
      setRegion({
        latitude: 14.601887,
        longitude: 121.093698,
        latitudeDelta: 0.008,
        longitudeDelta: 0.008,
      });
    } else if (barangayLoc == 'Barangay Dela Paz') {
      setRegion({
        latitude: 14.6137,
        longitude: 121.096,
        latitudeDelta: 0.008,
        longitudeDelta: 0.008,
      });
    } else if (barangayLoc == 'Barangay Maybunga') {
      setRegion({
        latitude: 14.5763,
        longitude: 121.085,
        latitudeDelta: 0.008,
        longitudeDelta: 0.008,
      });
    } else if (barangayLoc == 'Barangay Rosario') {
      setRegion({
        latitude: 14.5885,
        longitude: 121.0891,
        latitudeDelta: 0.008,
        longitudeDelta: 0.008,
      });
    }
    axios({
      url: 'https://kabisigapp.com/api/vulnerablearea/' + brgy,
      method: 'GET',
    })
      .then(function (response) {
        setLocation(response.data);
      })
      .catch(function (e) {
        console.log(e);
      });
  }, [degree, landmark, type]);
  return (
    <SafeAreaView>
      <MapView
        //provider={PROVIDER_GOOGLE}
        style={styles.container}
        region={region}
        ref={mapView}
        onRegionChangeComplete={region => setRegion(region)}>
        {location.map(data => {
          if (data.degree == 'High') {
            return (
              <View>
                <Marker
                  title={data.nearest_landmark}
                  description={data.type_of_disaster}
                  coordinate={{
                    latitude: parseFloat(data.vulArea_lat),
                    longitude: parseFloat(data.vulArea_lng),
                  }}
                  opacity={0.0}
                  pinColor={'rgba(255, 0, 0, 0.5)'}
                  onPress={(degree, landmark, type) =>
                    showDetails(
                      data.degree,
                      data.nearest_landmark,
                      data.type_of_disaster,
                    )
                  }
                />

                <Circle
                  key={data.id}
                  center={{
                    latitude: parseFloat(data.vulArea_lat),
                    longitude: parseFloat(data.vulArea_lng),
                  }}
                  radius={90}
                  strokeWidth={1}
                  strokeColor={'rgba(255, 0, 0, 0.5)'}
                  fillColor={'rgba(255, 0, 0, 0.5)'}
                />
              </View>
            );
          } else {
            return (
              <View>
                <Marker
                  title={data.nearest_landmark}
                  description={data.type_of_disaster}
                  coordinate={{
                    latitude: parseFloat(data.vulArea_lat),
                    longitude: parseFloat(data.vulArea_lng),
                  }}
                  opacity={0.0}
                  pinColor={'rgba(255, 0, 0, 0.5)'}
                  onPress={(degree, landmark, type) =>
                    showDetails(
                      data.degree,
                      data.nearest_landmark,
                      data.type_of_disaster,
                    )
                  }
                />
                <Circle
                  key={data.id}
                  center={{
                    latitude: parseFloat(data.vulArea_lat),
                    longitude: parseFloat(data.vulArea_lng),
                  }}
                  radius={90}
                  strokeWidth={1}
                  strokeColor={'rgba(255,165,0, 0.5)'}
                  fillColor={'rgba(255,165,0, 0.5)'}
                />
              </View>
            );
          }
        })}
      </MapView>

      <View style={[styles.card, styles.elevation]}>
        <View style={styles.cardAlign}>
          <Text
            style={{
              color: 'black',
              fontWeight: 'bold',
              fontSize: 20,
              color: '#004F91',
            }}>
            {type}
          </Text>
        </View>
        <View style={styles.cardAlign}>
          <Text style={{color: 'black', fontWeight: 'bold'}}>
            Nearest Landmark:{' '}
          </Text>
          <Text style={{color: 'black'}}>{landmark}</Text>
        </View>
        <View style={styles.cardAlign}>
          <Text style={{color: 'black', fontWeight: 'bold'}}>Degree: </Text>
          {degree == 'Medium' ? (
            <Text style={{color: 'rgba(255,165,0, 1)'}}>{degree}</Text>
          ) : (
            <Text style={{color: 'rgba(255, 0, 0, 1)'}}>{degree}</Text>
          )}
        </View>
      </View>
    </SafeAreaView>
  );
}

const styles = StyleSheet.create({
  container: {
    //...StyleSheet.absoluteFillObject,
    height: Dimensions.get('window').height / 1.5,
    width: Dimensions.get('window').width,
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
  map: {
    ...StyleSheet.absoluteFillObject,
  },

  cardAlign: {
    flexDirection: 'row',
  },

  card: {
    borderLeftWidth: 3,
    borderLeftColor: '#004F91',
    backgroundColor: 'white',
    borderRadius: 8,
    paddingVertical: 10,
    paddingHorizontal: 10,
    width: '100%',
    marginVertical: 10,
  },
  elevation: {
    elevation: 2,
    shadowColor: '#52006A',
  },
});

export default VulnerabilityMap;

//<Circle
//  key={data.id}
//  center={{
//    latitude: parseFloat(data.vulArea_lat),
//    longitude: parseFloat(data.vulArea_lng),
//  }}
//  radius={90}
//  strokeWidth={1}
//  strokeColor={'rgba(255, 0, 0, 0.5)'}
//  fillColor={'rgba(255, 0, 0, 0.5)'}
///>
